buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'org.maxur'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}


ext {
    springBootAdminVersion = '2.0.3'
    springCloudServicesVersion = '2.0.1.RELEASE'
    springCloudVersion = 'Finchley.SR1'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-actuator')
//    implementation('org.springframework.boot:spring-boot-starter-amqp')
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-cloud-connectors')
//    implementation('org.springframework.boot:spring-boot-starter-data-cassandra-reactive')
//    implementation('org.springframework.boot:spring-boot-starter-data-redis-reactive')
    implementation('org.springframework.boot:spring-boot-starter-integration')
//    implementation('org.springframework.boot:spring-boot-starter-jooq')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-websocket')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('de.codecentric:spring-boot-admin-starter-server')
//    implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker')
//    implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
//    implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
//    implementation('org.flywaydb:flyway-core')
    implementation('org.springframework.cloud:spring-cloud-cloudfoundry-discovery')
    implementation('org.springframework.cloud:spring-cloud-config-server')
    implementation('org.springframework.cloud:spring-cloud-starter')
    implementation('org.springframework.cloud:spring-cloud-starter-config')
    implementation('org.springframework.cloud:spring-cloud-starter-oauth2')
    implementation('org.springframework.cloud:spring-cloud-starter-security')
//    implementation('org.springframework.kafka:spring-kafka')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('org.postgresql:postgresql')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.springframework.security:spring-security-test')

    compile('ch.qos.logback:logback-classic')
    compile('org.slf4j:jul-to-slf4j')
    compile('org.slf4j:log4j-over-slf4j')

}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
